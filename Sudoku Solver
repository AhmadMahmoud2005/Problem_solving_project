board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]

def print_board(board: list):
    for row in range(0, len(board)):
        if (row) % 3 == 0 or row == 0:
            print(" " + "-" * 25)
        for col in range(0, len(board[row])):
            if (col + 1) % 3 == 0:
                print(board[row][col] + " | ", end="")
            elif col == 0:
                print(" | " + board[row][col], end=" ")
            else: print(board[row][col], end=" ")
        print()
    print(" " + "-" * 25)


def is_valid(board, row, col, num):
    not_in_row = not num in board[row]
    not_in_col = not num in [i[col] for i in board ]
    not_in_suboxes = not num in [board[i][j] for i in range(row//3*3, row//3*3+3) for j in range(col//3*3, col//3*3+3) ]
    
    return not_in_row and not_in_col and not_in_suboxes


def solve(board, row=0, col=0):
    if row == 9:
        return True
    elif col == 9:
        return solve(board, row+1, 0)
    elif board[row][col] != ".":
        return solve(board, row, col+1)
    else:
        for i in range(1, 10):
            if is_valid(board, row, col, str(i)):
                board[row][col] = str(i)
                if solve(board, row, col+1):
                    return True
                board[row][col] = "."
        return False

print("Before Solving")
print_board(board)
if solve(board):
    print("After Solving")
    print_board(board)
else: print("Can't be Solved")
